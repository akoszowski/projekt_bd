[{"/home/james/git/projekt_bd/client/src/index.js":"1","/home/james/git/projekt_bd/client/src/App.js":"2","/home/james/git/projekt_bd/client/src/Login.js":"3","/home/james/git/projekt_bd/client/src/reportWebVitals.js":"4","/home/james/git/projekt_bd/client/src/Pools.js":"5","/home/james/git/projekt_bd/client/src/Timetable.js":"6","/home/james/git/projekt_bd/client/src/state-manager.js":"7"},{"size":500,"mtime":1613004175842,"results":"8","hashOfConfig":"9"},{"size":1183,"mtime":1613005456273,"results":"10","hashOfConfig":"9"},{"size":2208,"mtime":1613004873378,"results":"11","hashOfConfig":"9"},{"size":362,"mtime":1612891294721,"results":"12","hashOfConfig":"9"},{"size":1136,"mtime":1613002765703,"results":"13","hashOfConfig":"9"},{"size":3777,"mtime":1613002728906,"results":"14","hashOfConfig":"9"},{"size":327,"mtime":1613005439916,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1jrpkrv",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/james/git/projekt_bd/client/src/index.js",[],["32","33"],"/home/james/git/projekt_bd/client/src/App.js",["34"],"/home/james/git/projekt_bd/client/src/Login.js",[],"/home/james/git/projekt_bd/client/src/reportWebVitals.js",[],"/home/james/git/projekt_bd/client/src/Pools.js",[],"/home/james/git/projekt_bd/client/src/Timetable.js",["35","36"],"import React, {Component} from 'react';\nimport './Timetable.css';\nimport axios from 'axios'\n\nclass Timetable extends Component {\n\n    constructor(props) {\n        super();\n        let now = new Date();\n        this.state = {\n            time : new Date(now.getFullYear(),now.getMonth(),now.getDate()),\n            headers: [\"6:00\", \"6:15\", \"6:30\", \"6:45\", \"7:00\", \"7:15\"],\n            data: [\n                [1, 2, 3, 4, 5,6],\n                [7,8,9,10,11,12]\n            ],\n            selected: new Proxy({}, {\n                get: (target, name) => name in target ? target[name] : (new Proxy({}, {\n                    get: (target, name) => name in target ? target[name] : false\n                }))\n            }),\n            currentlySelected : 0\n        }\n        this.global = props.global;\n    }\n\n\n    componentDidMount() {\n        /*        axios.get('/api/v1//pools').then((res) => {\n                    const data = res.data;\n                    this.setState({response: data});\n                });*/\n    }\n\n    getClicked(rowIndex, columnIndex, value) {\n        return (this.state.selected[rowIndex])[columnIndex];\n    }\n\n\n    toggle(rowIndex, columnIndex) {\n        let left = this.getClicked(rowIndex,columnIndex-1);\n        let middle = this.getClicked(rowIndex, columnIndex);\n        let right = this.getClicked(rowIndex,columnIndex+1);\n\n        if(this.state.currentlySelected == 0 || (!middle && (left || right)) || (middle && (!left || !right))) {\n            this.setState((prevState) => {\n                    let copy = Object.assign({}, prevState);\n                    let rowCopy = Object.assign({}, copy.selected[rowIndex]);\n                    rowCopy[columnIndex] = !middle;\n                    copy.selected[rowIndex] = rowCopy;\n                    copy.currentlySelected += !middle ? 1 : -1;\n                    return copy;\n                }\n            );\n        }\n    }\n\n    changeTime(numOfDays){\n        let newDate = (this.state.time.getDate())+numOfDays;\n        console.log(newDate);\n        this.setState((prevState)=>{\n            let copy = Object.assign({},prevState);\n            copy.time.setDate(newDate);\n            return copy;\n        })\n    }\n\n\n    render() {\n        return <div>\n            <table>\n                <thead>\n                    <tr>\n                        <td colSpan=\"100%\">\n                            <center>\n                            <button onClick={((e)=>this.changeTime(-1))}>Prev</button>\n                            {this.state.time.toLocaleDateString(\"pl-PL\")}\n                            <button onClick={((e)=>this.changeTime(1))}>Next</button>\n                            </center>\n                        </td>\n                    </tr>\n                    <tr>\n                        {this.state.headers.map((hour) =>\n                            <td>{hour}</td>\n                        )}\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.state.data.map((row, rowIndex) =>\n                        <tr>\n                            {row.map((n, columnIndex) => {\n                                let clicked = this.getClicked(rowIndex, columnIndex);\n                                let color =  clicked ? \"green\" : \"blue\";\n                                let style = {\n                                    \"background-color\": color\n                                };\n                                console.log(this.state.currentlySelected)\n                                return <td style={style} onClick={(e) => this.toggle(rowIndex, columnIndex)}>{n}</td>;\n                            })}\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n        </div>;\n    }\n\n\n}\n\nexport default Timetable;","/home/james/git/projekt_bd/client/src/state-manager.js",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":41,"column":9,"nodeType":"43","messageId":"44","endLine":41,"endColumn":15},{"ruleId":"45","severity":1,"message":"46","line":3,"column":8,"nodeType":"47","messageId":"48","endLine":3,"endColumn":13},{"ruleId":"49","severity":1,"message":"50","line":45,"column":41,"nodeType":"51","messageId":"52","endLine":45,"endColumn":43},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]