[{"/home/james/git/projekt_bd/client/src/index.js":"1","/home/james/git/projekt_bd/client/src/App.js":"2","/home/james/git/projekt_bd/client/src/Login.js":"3","/home/james/git/projekt_bd/client/src/reportWebVitals.js":"4","/home/james/git/projekt_bd/client/src/Pools.js":"5","/home/james/git/projekt_bd/client/src/Timetable.js":"6","/home/james/git/projekt_bd/client/src/state-manager.js":"7","/home/james/git/projekt_bd/client/src/helpers.js":"8","/home/james/git/projekt_bd/client/src/cookie-manager.js":"9","/home/james/git/projekt_bd/client/src/Reservations.js":"10"},{"size":500,"mtime":1613004175842,"results":"11","hashOfConfig":"12"},{"size":2574,"mtime":1613012164628,"results":"13","hashOfConfig":"12"},{"size":2334,"mtime":1613010145063,"results":"14","hashOfConfig":"12"},{"size":362,"mtime":1612891294721,"results":"15","hashOfConfig":"12"},{"size":1337,"mtime":1613006322480,"results":"16","hashOfConfig":"12"},{"size":5657,"mtime":1613010132267,"results":"17","hashOfConfig":"12"},{"size":389,"mtime":1613005839776,"results":"18","hashOfConfig":"12"},{"size":72,"mtime":1613007865880,"results":"19","hashOfConfig":"12"},{"size":88,"mtime":1613010104016,"results":"20","hashOfConfig":"12"},{"size":1392,"mtime":1613012247642,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jrpkrv",{"filePath":"24","messages":"25","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},"/home/james/git/projekt_bd/client/src/index.js",[],"/home/james/git/projekt_bd/client/src/App.js",["45","46","47","48","49"],"import React, {Component} from 'react';\nimport './App.css';\nimport Login from './Login';\nimport Pools from './Pools';\nimport Timetable from './Timetable';\nimport Reservations from './Reservations';\nimport {listen} from './state-manager'\nimport {cookies} from './cookie-manager'\nimport {isDefined} from './helpers'\nimport axios from 'axios'\n\nclass App extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            page: \"pools\",\n            response: {body: \"\"},\n        };\n    }\n\n    componentDidMount() {\n        this.receiveStateChange({});\n        axios.get('/api/v1/say-something').then((res) => {\n            const response = res.data;\n            console.log(res);\n            console.log(response);\n            this.setState({response});\n        });\n    }\n\n    componentWillMount() {\n        this.receiveStateChange = this.receiveStateChange.bind(this);\n        listen(\"changeState\", this.receiveStateChange);\n    }\n\n    receiveStateChange(payload) {\n        if(!isDefined(cookies.get(\"token\")))\n            payload.page = \"login\";\n        this.setState(payload);\n    }\n\n    currentPage() {\n        switch (this.state.page) {\n            case \"login\":\n                return <Login/>;\n                break;\n            case \"pools\":\n                return <Pools/>;\n                break;\n            case \"timetable\":\n                return <Timetable selectedPool={this.state.selectedPool}/>;\n                break;\n            case \"reservations\":\n                return <Reservations/>;\n                break;\n            case \"end\":\n                return <div>\n                    <h1>Reservation successful!</h1>\n                    <button onClick={(e) => this.receiveStateChange({page: \"pools\"})}>Make another</button>\n                </div>;\n                break;\n            default:\n                return <h1>404</h1>\n        }\n    }\n\n    logout() {\n        cookies.remove('token');\n        this.receiveStateChange({});\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>HELLO from the frontend!</h1>\n                <button onClick={(e) => this.logout()}>Logout</button>\n                <button onClick={(e) => this.receiveStateChange({page: \"pools\"})}>Make a reservation</button>\n                <button onClick={(e) => this.receiveStateChange({page: \"reservations\"})}>List reservations</button>\n                <h1>{this.state.response.body}</h1>\n                {this.state.page}\n                {this.currentPage()}\n            </div>\n        );\n    }\n}\n\nexport default App;","/home/james/git/projekt_bd/client/src/Login.js",[],"/home/james/git/projekt_bd/client/src/reportWebVitals.js",[],"/home/james/git/projekt_bd/client/src/Pools.js",[],"/home/james/git/projekt_bd/client/src/Timetable.js",["50","51","52","53"],"import React, {Component} from 'react';\nimport './Timetable.css';\nimport axios from 'axios'\nimport {isDefined} from './helpers'\nimport {changeRootState} from './state-manager'\n\nclass Timetable extends Component {\n\n    resetSelection() {\n        this.setState({\n            selectedRow: undefined,\n            selectedColumnStart: undefined,\n            selectedColumnStop: undefined\n        });\n    }\n\n    constructor(props) {\n        super();\n        let now = new Date();\n        this.state = {\n            time: new Date(now.getFullYear(), now.getMonth(), now.getDate()),\n            headers: [\"6:00\", \"6:15\", \"6:30\", \"6:45\", \"7:00\", \"7:15\"],\n            data: [\n                [1, 2, 3, 4, 5, 6],\n                [7, 8, 9, 10, 11, 12]\n            ],\n            selectedRow: undefined,\n            selectedColumnStart: undefined,\n            selectedColumnStop: undefined\n        }\n        this.selectedPool = props.selectedPool;\n    }\n\n\n    componentDidMount() {\n        /*        axios.get('/api/v1//pools').then((res) => {\n                    const data = res.data;\n                    this.setState({response: data});\n                });*/\n    }\n\n    getClicked(rowIndex, columnIndex) {\n        let result = isDefined(rowIndex) && (rowIndex == this.state.selectedRow) && (this.state.selectedColumnStart <= columnIndex) && (columnIndex <= this.state.selectedColumnStop);\n        console.log(result);\n        return result;\n    }\n\n    makeReservation() {\n        axios.post('/api/v1/reserve',{\n            selectedPool: this.selectedPool,\n            selectedRow: this.state.selectedRow,\n            date: this.state.time,\n            start: this.state.headers[this.state.selectedColumnStart],\n            stop: this.state.headers[this.state.selectedColumnStop]\n        }).then((response)=>{\n            console.log(\"Success!\");\n            changeRootState({page: \"end\"});\n            console.log(response);\n        }).catch(function (error) {\n            console.log(\"Error!\");\n            console.log(error);\n        });\n    }\n\n\n    toggle(rowIndex, columnIndex) {\n        let left = this.getClicked(rowIndex, columnIndex - 1);\n        let middle = this.getClicked(rowIndex, columnIndex);\n        let right = this.getClicked(rowIndex, columnIndex + 1);\n\n\n        if (!isDefined(this.state.selectedRow) || (!middle && (left || right)) || (middle && (!left || !right))) {\n            console.log(\"Toggling\", rowIndex, columnIndex);\n            this.setState((prevState) => {\n                    let copy = Object.assign({}, prevState);\n                    copy.selectedRow = rowIndex;\n                    console.log(copy)\n                    console.log(\"def\", isDefined(copy.selectedColumnStart))\n                    if (middle) {\n                        if(copy.selectedColumnStart == copy.selectedColumnStop)\n                            this.resetSelection();\n                        else {\n                            if (copy.selectedColumnStart == columnIndex)\n                                copy.selectedColumnStart++;\n                            if (copy.selectedColumnStop == columnIndex)\n                                copy.selectedColumnStop--;\n                        }\n                    } else {\n                        if (!isDefined(copy.selectedColumnStart) || columnIndex < copy.selectedColumnStart)\n                            copy.selectedColumnStart = columnIndex;\n                        if (!isDefined(copy.selectedColumnStop) || copy.selectedColumnStop < columnIndex)\n                            copy.selectedColumnStop = columnIndex;\n                    }\n                    return copy;\n                }\n            );\n        }\n    }\n\n    changeTime(numOfDays) {\n        let newDate = (this.state.time.getDate()) + numOfDays;\n        console.log(newDate);\n        this.setState((prevState) => {\n            let copy = Object.assign({}, prevState);\n            copy.time.setDate(newDate);\n            return copy;\n        })\n        this.resetSelection();\n    }\n\n\n    render() {\n        return <div>\n            <h1>Selected pool: {this.selectedPool} </h1>\n            <table>\n                <thead>\n                    <tr>\n                        <td colSpan=\"100%\">\n                            <center>\n                                <button onClick={((e) => this.changeTime(-1))}>Prev</button>\n                                {this.state.time.toLocaleDateString(\"pl-PL\")}\n                                <button onClick={((e) => this.changeTime(1))}>Next</button>\n                            </center>\n                        </td>\n                    </tr>\n                    <tr>\n                        {this.state.headers.map((hour) =>\n                            <td>{hour}</td>\n                        )}\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.state.data.map((row, rowIndex) =>\n                        <tr>\n                            {row.map((n, columnIndex) => {\n                                let clicked = this.getClicked(rowIndex, columnIndex);\n                                let color = clicked ? \"green\" : \"blue\";\n                                let style = {\n                                    \"backgroundColor\": color\n                                };\n                                return <td style={style} onClick={(e) => this.toggle(rowIndex, columnIndex)}>{n}</td>;\n                            })}\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n            <button onClick={(e)=>this.makeReservation()}>Reserve</button>\n        </div>;\n    }\n\n\n}\n\nexport default Timetable;","/home/james/git/projekt_bd/client/src/state-manager.js",[],"/home/james/git/projekt_bd/client/src/helpers.js",[],"/home/james/git/projekt_bd/client/src/cookie-manager.js",[],"/home/james/git/projekt_bd/client/src/Reservations.js",["54","55"],"import React, { Component } from 'react';\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport './Reservations.css'\nimport axios from 'axios'\n\nclass Reservations extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            response: {rows: []},\n        };\n    }\n\n\n    componentDidMount() {\n        axios.get('/api/v1/reservations').then((res) => {\n            //const data = res.data;\n            //this.setState({response: data});\n        });\n    }\n\n    render() {\n        return <div>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Basen</th>\n                        <th>Data</th>\n                        <th>Od</th>\n                        <th>Do</th>\n                    </tr>\n                </thead>\n                {this.state.response.rows.map((row, rowIndex) => {\n                        return <tbody onClick={(e)=>this.selectPool(rowIndex)}>\n                            <tr>\n                                <td>{row[0]}</td>\n                                <td>{row[1]}</td>\n                                <td>{row[2]}</td>\n                                <td>{row[3]}</td>\n                            </tr>\n                        </tbody>;\n                    }\n                )}\n            </table>\n        </div>;\n    }\n}\n\nexport default Reservations;\n",{"ruleId":"56","severity":1,"message":"57","line":47,"column":17,"nodeType":"58","messageId":"59","endLine":47,"endColumn":23},{"ruleId":"56","severity":1,"message":"57","line":50,"column":17,"nodeType":"58","messageId":"59","endLine":50,"endColumn":23},{"ruleId":"56","severity":1,"message":"57","line":53,"column":17,"nodeType":"58","messageId":"59","endLine":53,"endColumn":23},{"ruleId":"56","severity":1,"message":"57","line":56,"column":17,"nodeType":"58","messageId":"59","endLine":56,"endColumn":23},{"ruleId":"56","severity":1,"message":"57","line":62,"column":17,"nodeType":"58","messageId":"59","endLine":62,"endColumn":23},{"ruleId":"60","severity":1,"message":"61","line":43,"column":55,"nodeType":"62","messageId":"63","endLine":43,"endColumn":57},{"ruleId":"60","severity":1,"message":"61","line":80,"column":53,"nodeType":"62","messageId":"63","endLine":80,"endColumn":55},{"ruleId":"60","severity":1,"message":"61","line":83,"column":58,"nodeType":"62","messageId":"63","endLine":83,"endColumn":60},{"ruleId":"60","severity":1,"message":"61","line":85,"column":57,"nodeType":"62","messageId":"63","endLine":85,"endColumn":59},{"ruleId":"64","severity":1,"message":"65","line":2,"column":8,"nodeType":"66","messageId":"67","endLine":2,"endColumn":12},{"ruleId":"64","severity":1,"message":"68","line":3,"column":8,"nodeType":"66","messageId":"67","endLine":3,"endColumn":14},"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used."]